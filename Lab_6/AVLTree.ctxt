#BlueJ class context
comment0.target=AVLTree
comment0.text=\r\n\ Demo\ implementation\ of\ the\ Binary\ Seacrh\ Tree\ class\r\n\r\n\ @author\ Nikita\ Gerasimov\r\n\ @version\ 2018-05-28\r\n
comment1.params=
comment1.target=AVLTree()
comment1.text=\r\n\ Constructor\ for\ objects\ of\ class\ BSTree\r\n
comment10.params=node
comment10.target=void\ inOrder(AVLNode)
comment10.text=\r\n\ Traversing\ the\ tree\ inOrder\ for\ the\ print\ method\r\n
comment11.params=current
comment11.target=int\ size(AVLNode)
comment11.text=\r\n\ Returns\ the\ number\ of\ nodes\ in\ the\ tree\r\n\ @return\ int\ the\ number\ of\ nodes\ in\ the\ tree\r\n
comment12.params=node
comment12.target=int\ height(AVLNode)
comment12.text=\r\n\ Utility\ method\ used\ to\ update\ heights\ of\ nodes\r\n\ @return\ the\ height\ of\ the\ current\ node\r\n
comment13.params=a\ b
comment13.target=int\ max(int,\ int)
comment13.text=\r\n\ Utility\ method\ to\ find\ the\ maximum\ of\ two\ numbers\r\n\ @return\ the\ bigger\ of\ two\ integers\r\n
comment14.params=current
comment14.target=void\ print(AVLNode)
comment14.text=\r\n\ Utility\ method\ to\ print\ out\ all\ nodes\ in-order\r\n
comment15.params=
comment15.target=AVLNode\ getRoot()
comment15.text=\r\n\ Getter\ memthod\ for\ the\ root\ of\ the\ tree\r\n\ @return\ the\ root\r\n
comment16.params=
comment16.target=boolean\ isAVL()
comment16.text=\r\n\ Checks\ if\ the\ tree\ is\ balanced\r\n\ @return\ true\ if\ the\ tree\ is\ balanced\r\n
comment17.params=node
comment17.target=boolean\ isAVL(AVLNode)
comment17.text=\r\n\ Checks\ if\ the\ tree\ is\ balanced\r\n\ @param\ subtree\r\n\ @return\ true\ if\ the\ tree\ is\ balanced\r\n
comment18.params=current
comment18.target=int\ getMinimum(AVLNode)
comment18.text=\r\n\ returns\ the\ minimum\ value\ of\ the\ given\ subtree\r\n\ @return\ the\ minimum\ value\r\n
comment19.params=
comment19.target=void\ test()
comment19.text=\r\n\ Utility\ tester\ method\r\n
comment2.params=value
comment2.target=void\ add(int)
comment2.text=\r\n\ public\ add\ method,\ starts\ from\ root\r\n
comment3.params=current\ value
comment3.target=AVLNode\ add(AVLNode,\ int)
comment3.text=\r\n\ Traverse\ the\ tree\ from\ the\ root\ and\ find\ the\ place\ for\ the\ new\ value\r\n\ @return\ the\ node\ that\ will\ be\ added\ to\ the\ tree\r\n
comment4.params=node
comment4.target=AVLNode\ balance(AVLNode)
comment4.text=\r\n\ Balances\ the\ tree\ after\ adding\ or\ removing\ values\r\n\ @return\ balanced\ subtree\r\n
comment5.params=value
comment5.target=void\ remove(int)
comment5.text=\r\n\ Removes\ the\ given\ value\ from\ the\ tree\r\n
comment6.params=current\ data
comment6.target=AVLNode\ remove(AVLNode,\ int)
comment6.text=\r\n\ Removes\ the\ given\ value\ from\ the\ tree\r\n\ @return\ the\ udpated\ subtree\r\n
comment7.params=node
comment7.target=int\ getBalance(AVLNode)
comment7.text=\r\n\ Utility\ method\ used\ to\ get\ the\ balance\ factor\ of\ the\ given\ node\r\n\ @return\ balance\ factor\r\n
comment8.params=current
comment8.target=AVLNode\ rotateLeft(AVLNode)
comment8.text=\r\n\ Utility\ method\ for\ left\ rotation\r\n\ @return\ the\ left\ rotated\ subtree\r\n
comment9.params=current
comment9.target=AVLNode\ rotateRight(AVLNode)
comment9.text=\r\n\ Utility\ method\ for\ right\ rotation\r\n\ @return\ the\ right\ rotated\ subtree\r\n
numComments=20
